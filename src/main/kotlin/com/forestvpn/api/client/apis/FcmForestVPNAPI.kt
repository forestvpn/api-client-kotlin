/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.forestvpn.api.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.forestvpn.api.client.models.CreateFCMDeviceRequest
import com.forestvpn.api.client.models.Error
import com.forestvpn.api.client.models.FCMDevice
import com.forestvpn.api.client.models.UpdateFCMDeviceRequest

import com.squareup.moshi.Json

import com.forestvpn.api.client.infrastructure.ApiClient
import com.forestvpn.api.client.infrastructure.ApiResponse
import com.forestvpn.api.client.infrastructure.ClientException
import com.forestvpn.api.client.infrastructure.ClientError
import com.forestvpn.api.client.infrastructure.ServerException
import com.forestvpn.api.client.infrastructure.ServerError
import com.forestvpn.api.client.infrastructure.MultiValueMap
import com.forestvpn.api.client.infrastructure.PartConfig
import com.forestvpn.api.client.infrastructure.RequestConfig
import com.forestvpn.api.client.infrastructure.RequestMethod
import com.forestvpn.api.client.infrastructure.ResponseType
import com.forestvpn.api.client.infrastructure.Success
import com.forestvpn.api.client.infrastructure.toMultiValue

class FcmForestVPNAPI(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.forestvpn.com/v2")
        }
    }

    /**
     * Device registration for push notification through out Firebase Cloud Messaging
     * 
     * @param createFCMDeviceRequest 
     * @return FCMDevice
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createFCMDevice(createFCMDeviceRequest: CreateFCMDeviceRequest) : FCMDevice {
        val localVarResponse = createFCMDeviceWithHttpInfo(createFCMDeviceRequest = createFCMDeviceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FCMDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Device registration for push notification through out Firebase Cloud Messaging
     * 
     * @param createFCMDeviceRequest 
     * @return ApiResponse<FCMDevice?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createFCMDeviceWithHttpInfo(createFCMDeviceRequest: CreateFCMDeviceRequest) : ApiResponse<FCMDevice?> {
        val localVariableConfig = createFCMDeviceRequestConfig(createFCMDeviceRequest = createFCMDeviceRequest)

        return request<CreateFCMDeviceRequest, FCMDevice>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createFCMDevice
     *
     * @param createFCMDeviceRequest 
     * @return RequestConfig
     */
    fun createFCMDeviceRequestConfig(createFCMDeviceRequest: CreateFCMDeviceRequest) : RequestConfig<CreateFCMDeviceRequest> {
        val localVariableBody = createFCMDeviceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/notification/fcm/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete fcm device
     * 
     * @param registrationID 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteFCMDevice(registrationID: kotlin.String) : Unit {
        val localVarResponse = deleteFCMDeviceWithHttpInfo(registrationID = registrationID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete fcm device
     * 
     * @param registrationID 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteFCMDeviceWithHttpInfo(registrationID: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteFCMDeviceRequestConfig(registrationID = registrationID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteFCMDevice
     *
     * @param registrationID 
     * @return RequestConfig
     */
    fun deleteFCMDeviceRequestConfig(registrationID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/notification/fcm/{registrationID}/".replace("{"+"registrationID"+"}", encodeURIComponent(registrationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Device info
     * 
     * @param registrationID 
     * @return FCMDevice
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFCMDevice(registrationID: kotlin.String) : FCMDevice {
        val localVarResponse = getFCMDeviceWithHttpInfo(registrationID = registrationID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FCMDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Device info
     * 
     * @param registrationID 
     * @return ApiResponse<FCMDevice?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFCMDeviceWithHttpInfo(registrationID: kotlin.String) : ApiResponse<FCMDevice?> {
        val localVariableConfig = getFCMDeviceRequestConfig(registrationID = registrationID)

        return request<Unit, FCMDevice>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFCMDevice
     *
     * @param registrationID 
     * @return RequestConfig
     */
    fun getFCMDeviceRequestConfig(registrationID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/notification/fcm/{registrationID}/".replace("{"+"registrationID"+"}", encodeURIComponent(registrationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update device fcm properties
     * 
     * @param registrationID 
     * @param updateFCMDeviceRequest 
     * @return FCMDevice
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateFCMDevice(registrationID: kotlin.String, updateFCMDeviceRequest: UpdateFCMDeviceRequest) : FCMDevice {
        val localVarResponse = updateFCMDeviceWithHttpInfo(registrationID = registrationID, updateFCMDeviceRequest = updateFCMDeviceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FCMDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update device fcm properties
     * 
     * @param registrationID 
     * @param updateFCMDeviceRequest 
     * @return ApiResponse<FCMDevice?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateFCMDeviceWithHttpInfo(registrationID: kotlin.String, updateFCMDeviceRequest: UpdateFCMDeviceRequest) : ApiResponse<FCMDevice?> {
        val localVariableConfig = updateFCMDeviceRequestConfig(registrationID = registrationID, updateFCMDeviceRequest = updateFCMDeviceRequest)

        return request<UpdateFCMDeviceRequest, FCMDevice>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateFCMDevice
     *
     * @param registrationID 
     * @param updateFCMDeviceRequest 
     * @return RequestConfig
     */
    fun updateFCMDeviceRequestConfig(registrationID: kotlin.String, updateFCMDeviceRequest: UpdateFCMDeviceRequest) : RequestConfig<UpdateFCMDeviceRequest> {
        val localVariableBody = updateFCMDeviceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/notification/fcm/{registrationID}/".replace("{"+"registrationID"+"}", encodeURIComponent(registrationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
